/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    public:
        enum route_t {LEFT, RIGHT};
        
        TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) 
        {
            //visit the tree, find out how to get to p and q from root, then find out the common route.
            list<route_t> proute;
            list<route_t> qroute;
            find_route(root, proute, p);
            find_route(root, qroute, q);
            list<route_t>::iterator pit = proute.begin();
            list<route_t>::iterator qit = qroute.begin();
            for (; pit != proute.end() && qit != qroute.end(); ++pit, ++qit) {
                if (*pit != *qit) {
                    return root;
                } else if (*pit == LEFT) {
                    root = root->left;
                } else {
                    root = root->right;
                }
            }
            return root; 
        }
        
        bool find_route(TreeNode* root, list<route_t>& route, TreeNode* target) 
        {
            if (root == nullptr) {
                return false;
            }
            if (root == target) {
                return true;
            }
            if (find_route(root->left, route, target)) {
                route.push_front(LEFT);
                return true;
            }
            if (find_route(root->right, route, target)) {
                route.push_front(RIGHT);
                return true;
            };
            return false;
        }
};
