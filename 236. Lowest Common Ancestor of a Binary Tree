/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    public:
        enum route_t {left, right};
        
        TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
            //visit the tree, find out how to get to p and q from root, then find out the common route.
            vector<route_t> proute;
            vector<route_t> qroute;
            get_route(root, proute, p);
            get_route(root, qroute, q);
            int min_route_size = min(proute.size(), qroute.size());
            for (int i = 0; i < min_route_size; ++i) {
                if (proute[i] != qroute[i]) {
                    return root;
                } else if (proute[i] == left) {
                    root = root->left;
                } else {
                    root = root->right;
                }
            }
            return root;
        }
        
        bool get_route(TreeNode* root, vector<route_t>& route, TreeNode* target) 
        {
            //0 means left, and 1 means right
            if (root == nullptr) {
                return false;
            }
            if (root == target) {
                return true;
            }
            route.push_back(left);
            if (get_route(root->left, route, target) == true) {
                return true;
            }
            route[route.size()-1] = right;
            if (get_route(root->right, route, target) == true) {
                return true;
            };
            route.pop_back();
            return false;
        }        
};
