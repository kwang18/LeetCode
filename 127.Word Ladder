//Time: O(n^2), Space: O (n)
class Solution {
    public:
        int ladderLength(string beginWord, string endWord, vector<string>& wordList) 
        {
            vector<string> beginWords;
            beginWords.push_back(beginWord);
            int length = 0;
            while (true) {
                for (int i = 0; i < beginWords.size(); ++ i) {
                    if (distance(beginWords[i], endWord) == 1) {
                        return length + 2;
                    }
                }
                if (wordList.empty()) {
                    break;
                } 
                vector<string> distance1;
                int l = wordList.size();
                for (int j = 0; j < beginWords.size(); ++ j) {
                    for (int i = 0; i < l; ++ i) {
                        if (distance(beginWords[j], wordList[i]) == 1) {
                            distance1.push_back(wordList[i]);
                            wordList.erase(wrodList.begin() + i);
                            -- l;
                            -- i;
                    }
                }
                if (distance1.empty()) {
                    break;
                }
                beginWords = distance1;
                ++ length;
             }
             return 0;
        }
        
        int distance(string a, string b) 
        {
            int l = a.length();
            int count = 0;
            for (int i = 0; i < l; ++ i) {
                if (a[i] != b[i]) {
                    ++ count;
                }
            }
            return count;
        }
};
